// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/post": {
            "get": {
                "description": "Retrieves a post and its comment tree from Reddit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post"
                ],
                "summary": "Get a Reddit post with comments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reddit post ID",
                        "name": "post_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PostDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "Search Reddit with various filters and parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search Reddit for posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query string",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Unix timestamp to filter posts",
                        "name": "since_timestamp",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (relevance, hot, top, new, comments)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time range (hour, day, week, month, year, all)",
                        "name": "time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    }
                }
            }
        },
        "/subreddit": {
            "get": {
                "description": "Retrieves posts from the specified subreddit with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subreddit"
                ],
                "summary": "Get posts from a subreddit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subreddit name without the r/ prefix",
                        "name": "subreddit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Unix timestamp to filter posts",
                        "name": "since_timestamp",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of posts to retrieve",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Retrieves profile information, posts, and comments for a specific Reddit user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get information about a Reddit user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reddit username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Unix timestamp to filter posts and comments (newer than this timestamp)",
                        "name": "since_timestamp",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of posts to retrieve. Use -1 for all available posts",
                        "name": "post_limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of comments to retrieve. Use -1 for all available comments",
                        "name": "comment_limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns user information, posts, and comments",
                        "schema": {
                            "$ref": "#/definitions/models.UserActivity"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    },
                    "502": {
                        "description": "Error occurred while scraping data",
                        "schema": {
                            "$ref": "#/definitions/models.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Comment": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Comment author's username",
                    "type": "string"
                },
                "body": {
                    "description": "Comment body text",
                    "type": "string"
                },
                "created_at": {
                    "description": "Comment creation timestamp",
                    "type": "string"
                },
                "has_more": {
                    "description": "Flag indicating if there are more child comments available",
                    "type": "boolean"
                },
                "id": {
                    "description": "Comment ID",
                    "type": "string"
                },
                "is_more": {
                    "description": "Flag indicating if this is a \"more comments\" placeholder",
                    "type": "boolean"
                },
                "more_ids": {
                    "description": "List of IDs for additional comments that need to be loaded",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "replies": {
                    "description": "Nested comment replies",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Comment"
                    }
                },
                "score": {
                    "description": "Comment score",
                    "type": "integer"
                }
            }
        },
        "models.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code",
                    "type": "integer"
                },
                "message": {
                    "description": "Error message",
                    "type": "string"
                }
            }
        },
        "models.Post": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Author's username",
                    "type": "string"
                },
                "body": {
                    "description": "Post body/content",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation timestamp",
                    "type": "string"
                },
                "flair": {
                    "description": "Post flair text",
                    "type": "string"
                },
                "id": {
                    "description": "Reddit post ID",
                    "type": "string"
                },
                "score": {
                    "description": "Post score (upvotes minus downvotes)",
                    "type": "integer"
                },
                "title": {
                    "description": "Post title",
                    "type": "string"
                },
                "url": {
                    "description": "Full URL to the post",
                    "type": "string"
                }
            }
        },
        "models.PostDetail": {
            "type": "object",
            "properties": {
                "comments": {
                    "description": "Comments on the post",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Comment"
                    }
                },
                "post": {
                    "description": "Post information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Post"
                        }
                    ]
                }
            }
        },
        "models.UserActivity": {
            "type": "object",
            "properties": {
                "comments": {
                    "description": "Comments made by the user",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserComment"
                    }
                },
                "posts": {
                    "description": "Posts created by the user",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserPost"
                    }
                },
                "user_info": {
                    "description": "User profile information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    ]
                }
            }
        },
        "models.UserComment": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Comment body text",
                    "type": "string"
                },
                "created_at": {
                    "description": "Comment creation timestamp",
                    "type": "string"
                },
                "id": {
                    "description": "Comment ID",
                    "type": "string"
                },
                "parent_author": {
                    "description": "Author of the parent comment (if this is a reply)",
                    "type": "string"
                },
                "post_id": {
                    "description": "ID of the post containing this comment",
                    "type": "string"
                },
                "post_title": {
                    "description": "Title of the post containing this comment",
                    "type": "string"
                },
                "score": {
                    "description": "Comment score",
                    "type": "integer"
                },
                "subreddit": {
                    "description": "Subreddit where the comment was posted",
                    "type": "string"
                }
            }
        },
        "models.UserInfo": {
            "type": "object",
            "properties": {
                "comment_karma": {
                    "description": "Comment karma score",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Account creation timestamp",
                    "type": "string"
                },
                "link_karma": {
                    "description": "Link karma score",
                    "type": "integer"
                },
                "username": {
                    "description": "Username",
                    "type": "string"
                }
            }
        },
        "models.UserPost": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Post body/content",
                    "type": "string"
                },
                "created_at": {
                    "description": "Post creation timestamp",
                    "type": "string"
                },
                "flair": {
                    "description": "Post flair text",
                    "type": "string"
                },
                "id": {
                    "description": "Post ID",
                    "type": "string"
                },
                "score": {
                    "description": "Post score",
                    "type": "integer"
                },
                "subreddit": {
                    "description": "Subreddit where the post was created",
                    "type": "string"
                },
                "title": {
                    "description": "Post title",
                    "type": "string"
                },
                "url": {
                    "description": "Full URL to the post",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "192.168.10.69:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Reddit Ingestion API",
	Description:      "This API provides endpoints to ingest data from Reddit, including posts, comments, user information, and search functionality.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
